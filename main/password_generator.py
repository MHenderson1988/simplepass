import secrets
import random
import string

character_list = [secrets.choice(string.ascii_uppercase), secrets.choice(string.ascii_lowercase),
                  secrets.choice(string.punctuation), secrets.choice(string.digits)]

"""
This function ensures that there is at least one uppercase, lowercase, symbol and digit in the password.
Takes no input and returns a list with a length of 4
"""


def minimum_one_each_type():
    char_list = []
    for i in character_list:
        char_list.append(i)
    return char_list


"""
This function generates a random combination of ascii characters to the length specified by user input.  The input
must be an integer between 4 and 20.  The output is a string of ascii characters.  
"""


def generate_password(lengthOfPassword):
    assert 3 < lengthOfPassword <= 20, "Password must be between 4 and 20 characters long"
    try:
        password_list = minimum_one_each_type()
        # Set counter to 4 to accommodate for the 4 characters already generated by the minimum_one_each_type function
        i = 4
        while i < lengthOfPassword:
            character = secrets.choice(character_list)
            password_list.append(character)
            i += 1
        random.shuffle(password_list)
        pass_string = ''.join(password_list)
        return pass_string
    except ValueError:
        print("Input error: Input an integer (whole number) between 4 and 20")
